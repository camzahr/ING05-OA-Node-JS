// Generated by CoffeeScript 1.11.1
var LevelStore, app, authCheck, bodyparser, cookieParser, db, errorhandler, express, fs, http, io, levelup, levelws, met, methodOverride, metrics, morgan, server, session, sockets, stream, url, user;

http = require('http');

user = require('./user');

url = require('url');

fs = require('fs');

express = require('express');

levelup = require('levelup');

levelws = require('level-ws');

bodyparser = require('body-parser');

metrics = require('./metrics');

morgan = require('morgan')('dev');

cookieParser = require('cookie-parser');

errorhandler = require('errorhandler');

methodOverride = require('method-override');

db = levelws(levelup(__dirname + "/../db/user"));

stream = db.createReadStream();

stream = db.createWriteStream();

session = require('express-session');

LevelStore = require('level-session-store')(session);

server = require('http').Server(app);

io = require('socket.io')(server);

app = express();

if (process.env.NODE_ENV === 'development') {
  app.use(errorhandler());
}

app.use(morgan);

app.set('port', 1337);

io.on('connection', function(socket) {
  return sockets.push(socket);
});

app.listen(app.get('port'), function() {});

console.log("server listening on " + (app.get('port')));

met = [
  {
    timestamp: (new Date('2013-11-04 14:00 UTC')).getTime(),
    value: 12,
    timestamp: (new Date('2013-11-04 14:10 UTC')).getTime(),
    value: 13
  }
];

app.set('views', __dirname + "/../views");

app.set('view engine', 'pug');

app.use('/', express["static"](__dirname + "/../views/public"));

app.use(bodyparser.json());

app.use(bodyparser.urlencoded());

app.use(cookieParser());

app.use(methodOverride('X-HTTP-Method-Override'));

app.get('/metrics.json', function(req, res) {
  return metrics.get(function(err, data) {
    if (err) {
      throw next(err);
    }
    return res.status(200).json(data);
  });
});

db.put('key1', 'value1');

app.get('/get/:num', function(req, res) {
  res.setHeader('Content-Type', 'text/plain');
  return db.get(req.params.num, function(err, value) {
    return res.end('value:' + value);
  });
});

db.put('key 1', 'value 1');

db.put('key 2', 'value 2');

db.get('key1', function(err, value) {
  if (err) {
    return handleError(err);
  } else {
    return console.log('value:', value);
  }
});

db.del('key 2');

sockets = [];

io.on('connection', function(socket) {
  return sockets.push(socket);
});

app.use(session({
  secret: 'MyAppSecret',
  store: new LevelStore('./db/sessions'),
  resave: true,
  saveUninitialized: true
}));

app.use(function(req, res, next) {
  var base, i, len, s;
  if (req.session.loggedIn === true) {
    req.session.count++;
    if ((base = req.session).history == null) {
      base.history = [];
    }
    req.session.history.push(req.url);
  }
  for (i = 0, len = sockets.length; i < len; i++) {
    s = sockets[i];
    s.emit('log', {
      url: req.url,
      username: req.session.username || 'anonymous'
    });
  }
  return next();
});

authCheck = function(req, res, next) {
  console.log('log : ', req.session.loggedIn);
  if (req.session.loggedIn !== true) {
    return res.redirect('/login');
  } else {
    return next();
  }
};

app.use(require('./routes/auth.coffee'));

app.use(require('./routes/user.coffee'));

app.use(require('./routes/user-metrics.coffee'));

app.listen(1337, '127.0.0.1', function() {
  return console.log("running on 127.0.0.1:1337");
});
